// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../app/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?
  student_id     String?  @unique @map("student_id")
  token_usage    Int      @default(0) @map("token_usage")
  estimated_cost Float    @default(0) @map("estimated_cost")
  created_at     DateTime @default(now()) @map("created_at")
  updated_at     DateTime @updatedAt @map("updated_at")

  // Relations
  token_usage_logs TokenUsageLog[] @relation("UserTokenUsage")
  conversations    Conversation[]  @relation("UserConversations")

  // Google OAuthÈñ¢ÈÄ£
  google_id     String? @unique @map("google_id")
  profile_image String? @map("profile_image")

  @@map("users")
  @@schema("public")
}

model TokenUsageLog {
  id              String   @id @default(cuid())
  user_id         String   @map("user_id")
  input_tokens    Int      @map("input_tokens")
  output_tokens   Int      @map("output_tokens")
  total_tokens    Int      @map("total_tokens")
  model_name      String   @map("model_name")
  cost            Float
  conversation_id String?  @map("conversation_id")
  created_at      DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation("UserTokenUsage", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("token_usage_logs")
  @@schema("public")
}

model Conversation {
  id         String   @id @default(cuid())
  user_id    String   @map("user_id")
  title      String   @default("Êñ∞„Åó„ÅÑ‰ºöË©±")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  // Relations
  user                 User                 @relation("UserConversations", fields: [user_id], references: [id], onDelete: Cascade)
  messages             Message[]            @relation("ConversationMessages")
  shared_conversations SharedConversation[] @relation("ConversationShares")

  @@map("conversations")
  @@schema("public")
}

model Message {
  id              String   @id @default(cuid())
  conversation_id String   @map("conversation_id")
  role            String // 'user', 'assistant', 'system'
  content         String
  created_at      DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation   @relation("ConversationMessages", fields: [conversation_id], references: [id], onDelete: Cascade)
  images       MessageImage[] @relation("MessageImages")

  @@map("messages")
  @@schema("public")
}

model MessageImage {
  id            String   @id @default(cuid())
  message_id    String   @map("message_id")
  filename      String
  original_name String?  @map("original_name")
  mime_type     String   @map("mime_type")
  size          Int
  base64_data   String   @map("base64_data") @db.Text
  url           String?
  created_at    DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation("MessageImages", fields: [message_id], references: [id], onDelete: Cascade)

  @@map("message_images")
  @@schema("public")
}

// üÜï „Ç∑„Çß„Ç¢„Åï„Çå„Åü‰ºöË©±„ÅÆ„É¢„Éá„É´
model SharedConversation {
  id              String    @id @default(cuid())
  conversation_id String    @map("conversation_id")
  share_id        String    @unique @default(cuid()) @map("share_id")
  title           String
  is_public       Boolean   @default(true) @map("is_public")
  expires_at      DateTime? @map("expires_at")
  view_count      Int       @default(0) @map("view_count")
  created_at      DateTime  @default(now()) @map("created_at")
  updated_at      DateTime  @updatedAt @map("updated_at")

  // Relations
  conversation Conversation @relation("ConversationShares", fields: [conversation_id], references: [id], onDelete: Cascade)

  @@map("shared_conversations")
  @@schema("public")
}
